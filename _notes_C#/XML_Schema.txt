
//  Syntax
1.  Creat XmlSchema object
2.  Creat XmlSchemaElement  (and manipulate it to your desires
                         .Name
                         .SchemaTypeName             //Set the type... link to w3.org, cause they're the official namers...
                         .SubstitutionGroup
                         
3.  Add the element to the XmlSchema
                                    .Items.Add(ElementObject)

4.  Create XmlSchemaChoice
                          .XmlSchemaChoice





//* http://www.w3schools.com/schema/schema_schema.asp

//     <xs:schema>       //  The Schema element is the root element of every XML Schema.  It may containt some shit
//                xmlns:xs="http://www.w3.org/2001/XMLSchema"   // This attribute would indicate that everything in the file is of the official schema type... see html






///////////         Creates an XML Schema file  (.XSD)
// http://msdn.microsoft.com/en-us/library/system.xml.schema.xmlschema.aspx

using System;
using System.Xml;
using System.Xml.Schema;

class XMLSchemaExamples
{
    public static void Main()
    {

        XmlSchema schema = new XmlSchema();

        // <xs:element name="cat" type="xs:string"/>
        XmlSchemaElement elementCat = new XmlSchemaElement();
        schema.Items.Add(elementCat);
        elementCat.Name = "cat";
        elementCat.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");

        // <xs:element name="dog" type="xs:string"/>
        XmlSchemaElement elementDog = new XmlSchemaElement();
        schema.Items.Add(elementDog);
        elementDog.Name = "dog";
        elementDog.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");

        // <xs:element name="redDog" substitutionGroup="dog" />
        XmlSchemaElement elementRedDog = new XmlSchemaElement();
        schema.Items.Add(elementRedDog);
        elementRedDog.Name = "redDog";
        elementRedDog.SubstitutionGroup = new XmlQualifiedName("dog");     // This sets the "redDog" name as just another way of saying "dog"... using the elementDog objects template and stuff.  
                                                                           // <xs:element name="redDog" type="xs:string" substitutionGroup="dog"/>
                                                                           // Thus, a valid XML doc could read <Dog>blabla</Dog>  OR <redDog>blabla</redDog>
                                                                           
        // <xs:element name="brownDog" substitutionGroup ="dog" />
        XmlSchemaElement elementBrownDog = new XmlSchemaElement();
        schema.Items.Add(elementBrownDog);
        elementBrownDog.Name = "brownDog";
        elementBrownDog.SubstitutionGroup = new XmlQualifiedName("dog");


        // <xs:element name="pets">
        XmlSchemaElement elementPets = new XmlSchemaElement();
        schema.Items.Add(elementPets);
        elementPets.Name = "pets";

        // <xs:complexType>
        XmlSchemaComplexType complexType = new XmlSchemaComplexType();
        elementPets.SchemaType = complexType;

        // <xs:choice minOccurs="0" maxOccurs="unbounded">
        XmlSchemaChoice choice = new XmlSchemaChoice();
        complexType.Particle = choice;
        choice.MinOccurs = 0;
        choice.MaxOccursString = "unbounded";

        // <xs:element ref="cat"/>
        XmlSchemaElement catRef = new XmlSchemaElement();
        choice.Items.Add(catRef);
        catRef.RefName = new XmlQualifiedName("cat");

        // <xs:element ref="dog"/>
        XmlSchemaElement dogRef = new XmlSchemaElement();
        choice.Items.Add(dogRef);
        dogRef.RefName = new XmlQualifiedName("dog");

        XmlSchemaSet schemaSet = new XmlSchemaSet();
        schemaSet.ValidationEventHandler += new ValidationEventHandler(ValidationCallbackOne);
        schemaSet.Add(schema);
        schemaSet.Compile();

        XmlSchema compiledSchema = null;

        foreach (XmlSchema schema1 in schemaSet.Schemas())
        {
            compiledSchema = schema1;
        }

        XmlNamespaceManager nsmgr = new XmlNamespaceManager(new NameTable());
        nsmgr.AddNamespace("xs", "http://www.w3.org/2001/XMLSchema");
        compiledSchema.Write(Console.Out, nsmgr);
    }

    public static void ValidationCallbackOne(object sender, ValidationEventArgs args)
    {
        Console.WriteLine(args.Message);
    }
}


::::::: OUTPUT .XSD file

<?xml version="1.0" encoding="IBM437"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

    // Declare some valid SimpleType elements (elements that don't have any child elements) 
    
    <xs:element name="cat" type="xs:string"/>
    <xs:element name="dog" type="xs:string"/>                                       // A valid XML doc could read <Dog>blabla</Dog>  
    <xs:element name="redDog" type="xs:string" substitutionGroup="dog"/>            // Alternatively, it could read <redDog>blabla</redDog> and it would be treated the same as <dog>
    <xs:element name="brownDog" type="xs:string" substitutionGroup ="dog" />        // Alternatively, <brownDog>...

    
    <xs:element name="pets">
      <xs:complexType>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="cat"/>
          <xs:element ref="dog"/>
        </xs:choice>
      </xs:complexType>
    </xs:element>
    
</xs:schema>









