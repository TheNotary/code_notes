//  http://msdn.microsoft.com/en-us/library/aa645740(VS.71).aspx



NOTE!!!!  You need to use the    Mutex object     to share memory with multiple threads.  Otherwise it's just rediculous...




////  Start a new thread (processing a method of an object) //

        Thread oThread = new Thread(new ThreadStart(oAlpha.Beta));            // Create the thread object, passing in the method of the object you'd like to run as a new thread        
        oThread.Start();                                                      // Start the thread



        while (!oThread.IsAlive) ; // this loops until oThread.IsAlive  ...pretty cool
        Thread.Sleep(2);           // Put the Main thread to sleep for 2 milliseconds to allow oThread to do a little processing



        oThread.Abort();                                                // Request that oThread be stopped
        
        oThread.Join();             // oThread pauses the thread that called it...  The parent thread is paused until the child thread terminates or maybe till something resumes it like...  Thread.Interupt()
        


////  End //////////////////////////////////////////////////////












////  Encapsulate the starting of a thread in a class method //

public class myClass
{
    volatile bool IsStarted;                          // use volatile to make it so multiple threads are able to access the memory with out conflict
    
    
    public void StartThread()
    {
        if (IsStarted == false)
        {
            Thread oThread = new Thread(new ThreadStart(this.ProcessToThread));   // create the thread object
            oThread.Start();                                                      // Start the thread
        }
    }
    
    private void ProcessToThread()
    {
        IsStarted = true;
        While (IsStarted);
        {
            // Code goes here
            //changingNumber = Math.Sin(3.141/2)
            // Code goes here
            if (ThingsHaveRunTheirCourse == "yes 100%")
                IsStarted = false;
        }
    }
}
    
//// End ///////////////////////////////////////






SPECIAL NOTICE:  When you need your thread to call a method from within the class that spawned it, you need to do a work around to trick the host class to call itself...


[code]
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;
using System.Reflection;

namespace _demoThreads
{
    public partial class Form1 : Form
    {
        private Thread trd;

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            MessageBox.Show("This is the main thread");

        }


        private void ThreadTask()
        {
            int stp;
            int newval;
            Random rnd = new Random();

            while (true)
            {
                stp = this.progressBar1.Step * rnd.Next(-1, 2);
                newval = this.progressBar1.Value + stp;

                if (newval > this.progressBar1.Maximum)
                    newval = this.progressBar1.Maximum;
                else if (newval < this.progressBar1.Minimum)
                    newval = this.progressBar1.Minimum;

                SetControlPropertyValue(progressBar1, "Value", newval); //This is a thread safe method
                //this.progressBar1.Value = newval;  // this is NOT thread safe

                Thread.Sleep(100);
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            Thread trd = new Thread(new ThreadStart(this.ThreadTask));
            trd.IsBackground = true;
            trd.Start();
        }








        delegate void SetControlValueCallback(Control oControl, string propName, object propValue);
        private void SetControlPropertyValue(Control oControl, string propName, object propValue)
        {
            if (oControl.InvokeRequired)
            {
                SetControlValueCallback d = new SetControlValueCallback(SetControlPropertyValue);
                oControl.Invoke(d, new object[] { oControl, propName, propValue });
            }
            else
            {
                Type t = oControl.GetType();
                PropertyInfo[] props = t.GetProperties();
                foreach (PropertyInfo p in props)
                {
                    if (p.Name.ToUpper() == propName.ToUpper())
                    {
                        p.SetValue(oControl, propValue, null);
                    }
                }
            }
        }




    }
}

[/code]






















